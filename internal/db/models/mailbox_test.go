// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMailboxes(t *testing.T) {
	t.Parallel()

	query := Mailboxes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMailboxesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mailbox{}
	if err = randomize.Struct(seed, o, mailboxDBTypes, true, mailboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Mailboxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMailboxesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mailbox{}
	if err = randomize.Struct(seed, o, mailboxDBTypes, true, mailboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Mailboxes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Mailboxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMailboxesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mailbox{}
	if err = randomize.Struct(seed, o, mailboxDBTypes, true, mailboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MailboxSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Mailboxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMailboxesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mailbox{}
	if err = randomize.Struct(seed, o, mailboxDBTypes, true, mailboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MailboxExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Mailbox exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MailboxExists to return true, but got false.")
	}
}

func testMailboxesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mailbox{}
	if err = randomize.Struct(seed, o, mailboxDBTypes, true, mailboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	mailboxFound, err := FindMailbox(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if mailboxFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMailboxesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mailbox{}
	if err = randomize.Struct(seed, o, mailboxDBTypes, true, mailboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Mailboxes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMailboxesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mailbox{}
	if err = randomize.Struct(seed, o, mailboxDBTypes, true, mailboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Mailboxes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMailboxesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mailboxOne := &Mailbox{}
	mailboxTwo := &Mailbox{}
	if err = randomize.Struct(seed, mailboxOne, mailboxDBTypes, false, mailboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}
	if err = randomize.Struct(seed, mailboxTwo, mailboxDBTypes, false, mailboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mailboxOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mailboxTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Mailboxes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMailboxesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mailboxOne := &Mailbox{}
	mailboxTwo := &Mailbox{}
	if err = randomize.Struct(seed, mailboxOne, mailboxDBTypes, false, mailboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}
	if err = randomize.Struct(seed, mailboxTwo, mailboxDBTypes, false, mailboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mailboxOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mailboxTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Mailboxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func mailboxBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Mailbox) error {
	*o = Mailbox{}
	return nil
}

func mailboxAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Mailbox) error {
	*o = Mailbox{}
	return nil
}

func mailboxAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Mailbox) error {
	*o = Mailbox{}
	return nil
}

func mailboxBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Mailbox) error {
	*o = Mailbox{}
	return nil
}

func mailboxAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Mailbox) error {
	*o = Mailbox{}
	return nil
}

func mailboxBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Mailbox) error {
	*o = Mailbox{}
	return nil
}

func mailboxAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Mailbox) error {
	*o = Mailbox{}
	return nil
}

func mailboxBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Mailbox) error {
	*o = Mailbox{}
	return nil
}

func mailboxAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Mailbox) error {
	*o = Mailbox{}
	return nil
}

func testMailboxesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Mailbox{}
	o := &Mailbox{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mailboxDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Mailbox object: %s", err)
	}

	AddMailboxHook(boil.BeforeInsertHook, mailboxBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mailboxBeforeInsertHooks = []MailboxHook{}

	AddMailboxHook(boil.AfterInsertHook, mailboxAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mailboxAfterInsertHooks = []MailboxHook{}

	AddMailboxHook(boil.AfterSelectHook, mailboxAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mailboxAfterSelectHooks = []MailboxHook{}

	AddMailboxHook(boil.BeforeUpdateHook, mailboxBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mailboxBeforeUpdateHooks = []MailboxHook{}

	AddMailboxHook(boil.AfterUpdateHook, mailboxAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mailboxAfterUpdateHooks = []MailboxHook{}

	AddMailboxHook(boil.BeforeDeleteHook, mailboxBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mailboxBeforeDeleteHooks = []MailboxHook{}

	AddMailboxHook(boil.AfterDeleteHook, mailboxAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mailboxAfterDeleteHooks = []MailboxHook{}

	AddMailboxHook(boil.BeforeUpsertHook, mailboxBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mailboxBeforeUpsertHooks = []MailboxHook{}

	AddMailboxHook(boil.AfterUpsertHook, mailboxAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mailboxAfterUpsertHooks = []MailboxHook{}
}

func testMailboxesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mailbox{}
	if err = randomize.Struct(seed, o, mailboxDBTypes, true, mailboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Mailboxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMailboxesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mailbox{}
	if err = randomize.Struct(seed, o, mailboxDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(mailboxColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Mailboxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMailboxToOneDomainUsingDomain(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Mailbox
	var foreign Domain

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, mailboxDBTypes, true, mailboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, domainDBTypes, false, domainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Domain struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DomainID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Domain().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddDomainHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Domain) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := MailboxSlice{&local}
	if err = local.L.LoadDomain(ctx, tx, false, (*[]*Mailbox)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Domain == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Domain = nil
	if err = local.L.LoadDomain(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Domain == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testMailboxToOneSetOpDomainUsingDomain(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Mailbox
	var b, c Domain

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mailboxDBTypes, false, strmangle.SetComplement(mailboxPrimaryKeyColumns, mailboxColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, domainDBTypes, false, strmangle.SetComplement(domainPrimaryKeyColumns, domainColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, domainDBTypes, false, strmangle.SetComplement(domainPrimaryKeyColumns, domainColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Domain{&b, &c} {
		err = a.SetDomain(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Domain != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DomainMailboxes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DomainID, x.ID) {
			t.Error("foreign key was wrong value", a.DomainID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DomainID))
		reflect.Indirect(reflect.ValueOf(&a.DomainID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DomainID, x.ID) {
			t.Error("foreign key was wrong value", a.DomainID, x.ID)
		}
	}
}

func testMailboxToOneRemoveOpDomainUsingDomain(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Mailbox
	var b Domain

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mailboxDBTypes, false, strmangle.SetComplement(mailboxPrimaryKeyColumns, mailboxColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, domainDBTypes, false, strmangle.SetComplement(domainPrimaryKeyColumns, domainColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDomain(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDomain(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Domain().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Domain != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.DomainID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.DomainMailboxes) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testMailboxesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mailbox{}
	if err = randomize.Struct(seed, o, mailboxDBTypes, true, mailboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMailboxesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mailbox{}
	if err = randomize.Struct(seed, o, mailboxDBTypes, true, mailboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MailboxSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMailboxesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mailbox{}
	if err = randomize.Struct(seed, o, mailboxDBTypes, true, mailboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Mailboxes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mailboxDBTypes = map[string]string{`ID`: `bigint`, `Username`: `varchar`, `Password`: `varchar`, `Name`: `varchar`, `AltEmail`: `varchar`, `Quota`: `bigint`, `LocalPart`: `varchar`, `Active`: `tinyint`, `AccessRestriction`: `varchar`, `Homedir`: `varchar`, `Maildir`: `varchar`, `UID`: `bigint`, `Gid`: `bigint`, `HomedirSize`: `bigint`, `MaildirSize`: `bigint`, `SizeAt`: `datetime`, `DeletePending`: `tinyint`, `Created`: `datetime`, `Modified`: `datetime`, `DomainID`: `bigint`}
	_              = bytes.MinRead
)

func testMailboxesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(mailboxPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(mailboxAllColumns) == len(mailboxPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Mailbox{}
	if err = randomize.Struct(seed, o, mailboxDBTypes, true, mailboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Mailboxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mailboxDBTypes, true, mailboxPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMailboxesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mailboxAllColumns) == len(mailboxPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Mailbox{}
	if err = randomize.Struct(seed, o, mailboxDBTypes, true, mailboxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Mailboxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mailboxDBTypes, true, mailboxPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mailboxAllColumns, mailboxPrimaryKeyColumns) {
		fields = mailboxAllColumns
	} else {
		fields = strmangle.SetComplement(
			mailboxAllColumns,
			mailboxPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MailboxSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMailboxesUpsert(t *testing.T) {
	t.Parallel()

	if len(mailboxAllColumns) == len(mailboxPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLMailboxUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Mailbox{}
	if err = randomize.Struct(seed, &o, mailboxDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Mailbox: %s", err)
	}

	count, err := Mailboxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, mailboxDBTypes, false, mailboxPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Mailbox struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Mailbox: %s", err)
	}

	count, err = Mailboxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
