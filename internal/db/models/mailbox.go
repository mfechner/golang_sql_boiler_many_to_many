// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Mailbox is an object representing the database table.
type Mailbox struct {
	ID                int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Username          string      `boil:"username" json:"username" toml:"username" yaml:"username"`
	Password          string      `boil:"password" json:"password" toml:"password" yaml:"password"`
	Name              null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	AltEmail          null.String `boil:"alt_email" json:"alt_email,omitempty" toml:"alt_email" yaml:"alt_email,omitempty"`
	Quota             int64       `boil:"quota" json:"quota" toml:"quota" yaml:"quota"`
	LocalPart         string      `boil:"local_part" json:"local_part" toml:"local_part" yaml:"local_part"`
	Active            bool        `boil:"active" json:"active" toml:"active" yaml:"active"`
	AccessRestriction string      `boil:"access_restriction" json:"access_restriction" toml:"access_restriction" yaml:"access_restriction"`
	Homedir           null.String `boil:"homedir" json:"homedir,omitempty" toml:"homedir" yaml:"homedir,omitempty"`
	Maildir           null.String `boil:"maildir" json:"maildir,omitempty" toml:"maildir" yaml:"maildir,omitempty"`
	UID               null.Int64  `boil:"uid" json:"uid,omitempty" toml:"uid" yaml:"uid,omitempty"`
	Gid               null.Int64  `boil:"gid" json:"gid,omitempty" toml:"gid" yaml:"gid,omitempty"`
	HomedirSize       null.Int64  `boil:"homedir_size" json:"homedir_size,omitempty" toml:"homedir_size" yaml:"homedir_size,omitempty"`
	MaildirSize       null.Int64  `boil:"maildir_size" json:"maildir_size,omitempty" toml:"maildir_size" yaml:"maildir_size,omitempty"`
	SizeAt            null.Time   `boil:"size_at" json:"size_at,omitempty" toml:"size_at" yaml:"size_at,omitempty"`
	DeletePending     null.Bool   `boil:"delete_pending" json:"delete_pending,omitempty" toml:"delete_pending" yaml:"delete_pending,omitempty"`
	Created           time.Time   `boil:"created" json:"created" toml:"created" yaml:"created"`
	Modified          null.Time   `boil:"modified" json:"modified,omitempty" toml:"modified" yaml:"modified,omitempty"`
	DomainID          null.Int64  `boil:"Domain_id" json:"Domain_id,omitempty" toml:"Domain_id" yaml:"Domain_id,omitempty"`

	R *mailboxR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mailboxL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MailboxColumns = struct {
	ID                string
	Username          string
	Password          string
	Name              string
	AltEmail          string
	Quota             string
	LocalPart         string
	Active            string
	AccessRestriction string
	Homedir           string
	Maildir           string
	UID               string
	Gid               string
	HomedirSize       string
	MaildirSize       string
	SizeAt            string
	DeletePending     string
	Created           string
	Modified          string
	DomainID          string
}{
	ID:                "id",
	Username:          "username",
	Password:          "password",
	Name:              "name",
	AltEmail:          "alt_email",
	Quota:             "quota",
	LocalPart:         "local_part",
	Active:            "active",
	AccessRestriction: "access_restriction",
	Homedir:           "homedir",
	Maildir:           "maildir",
	UID:               "uid",
	Gid:               "gid",
	HomedirSize:       "homedir_size",
	MaildirSize:       "maildir_size",
	SizeAt:            "size_at",
	DeletePending:     "delete_pending",
	Created:           "created",
	Modified:          "modified",
	DomainID:          "Domain_id",
}

var MailboxTableColumns = struct {
	ID                string
	Username          string
	Password          string
	Name              string
	AltEmail          string
	Quota             string
	LocalPart         string
	Active            string
	AccessRestriction string
	Homedir           string
	Maildir           string
	UID               string
	Gid               string
	HomedirSize       string
	MaildirSize       string
	SizeAt            string
	DeletePending     string
	Created           string
	Modified          string
	DomainID          string
}{
	ID:                "mailbox.id",
	Username:          "mailbox.username",
	Password:          "mailbox.password",
	Name:              "mailbox.name",
	AltEmail:          "mailbox.alt_email",
	Quota:             "mailbox.quota",
	LocalPart:         "mailbox.local_part",
	Active:            "mailbox.active",
	AccessRestriction: "mailbox.access_restriction",
	Homedir:           "mailbox.homedir",
	Maildir:           "mailbox.maildir",
	UID:               "mailbox.uid",
	Gid:               "mailbox.gid",
	HomedirSize:       "mailbox.homedir_size",
	MaildirSize:       "mailbox.maildir_size",
	SizeAt:            "mailbox.size_at",
	DeletePending:     "mailbox.delete_pending",
	Created:           "mailbox.created",
	Modified:          "mailbox.modified",
	DomainID:          "mailbox.Domain_id",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var MailboxWhere = struct {
	ID                whereHelperint64
	Username          whereHelperstring
	Password          whereHelperstring
	Name              whereHelpernull_String
	AltEmail          whereHelpernull_String
	Quota             whereHelperint64
	LocalPart         whereHelperstring
	Active            whereHelperbool
	AccessRestriction whereHelperstring
	Homedir           whereHelpernull_String
	Maildir           whereHelpernull_String
	UID               whereHelpernull_Int64
	Gid               whereHelpernull_Int64
	HomedirSize       whereHelpernull_Int64
	MaildirSize       whereHelpernull_Int64
	SizeAt            whereHelpernull_Time
	DeletePending     whereHelpernull_Bool
	Created           whereHelpertime_Time
	Modified          whereHelpernull_Time
	DomainID          whereHelpernull_Int64
}{
	ID:                whereHelperint64{field: "`mailbox`.`id`"},
	Username:          whereHelperstring{field: "`mailbox`.`username`"},
	Password:          whereHelperstring{field: "`mailbox`.`password`"},
	Name:              whereHelpernull_String{field: "`mailbox`.`name`"},
	AltEmail:          whereHelpernull_String{field: "`mailbox`.`alt_email`"},
	Quota:             whereHelperint64{field: "`mailbox`.`quota`"},
	LocalPart:         whereHelperstring{field: "`mailbox`.`local_part`"},
	Active:            whereHelperbool{field: "`mailbox`.`active`"},
	AccessRestriction: whereHelperstring{field: "`mailbox`.`access_restriction`"},
	Homedir:           whereHelpernull_String{field: "`mailbox`.`homedir`"},
	Maildir:           whereHelpernull_String{field: "`mailbox`.`maildir`"},
	UID:               whereHelpernull_Int64{field: "`mailbox`.`uid`"},
	Gid:               whereHelpernull_Int64{field: "`mailbox`.`gid`"},
	HomedirSize:       whereHelpernull_Int64{field: "`mailbox`.`homedir_size`"},
	MaildirSize:       whereHelpernull_Int64{field: "`mailbox`.`maildir_size`"},
	SizeAt:            whereHelpernull_Time{field: "`mailbox`.`size_at`"},
	DeletePending:     whereHelpernull_Bool{field: "`mailbox`.`delete_pending`"},
	Created:           whereHelpertime_Time{field: "`mailbox`.`created`"},
	Modified:          whereHelpernull_Time{field: "`mailbox`.`modified`"},
	DomainID:          whereHelpernull_Int64{field: "`mailbox`.`Domain_id`"},
}

// MailboxRels is where relationship names are stored.
var MailboxRels = struct {
	Domain string
}{
	Domain: "Domain",
}

// mailboxR is where relationships are stored.
type mailboxR struct {
	Domain *Domain `boil:"Domain" json:"Domain" toml:"Domain" yaml:"Domain"`
}

// NewStruct creates a new relationship struct
func (*mailboxR) NewStruct() *mailboxR {
	return &mailboxR{}
}

func (r *mailboxR) GetDomain() *Domain {
	if r == nil {
		return nil
	}
	return r.Domain
}

// mailboxL is where Load methods for each relationship are stored.
type mailboxL struct{}

var (
	mailboxAllColumns            = []string{"id", "username", "password", "name", "alt_email", "quota", "local_part", "active", "access_restriction", "homedir", "maildir", "uid", "gid", "homedir_size", "maildir_size", "size_at", "delete_pending", "created", "modified", "Domain_id"}
	mailboxColumnsWithoutDefault = []string{"username", "password", "name", "alt_email", "quota", "local_part", "active", "access_restriction", "homedir", "maildir", "uid", "gid", "homedir_size", "maildir_size", "size_at", "delete_pending", "created", "modified", "Domain_id"}
	mailboxColumnsWithDefault    = []string{"id"}
	mailboxPrimaryKeyColumns     = []string{"id"}
	mailboxGeneratedColumns      = []string{}
)

type (
	// MailboxSlice is an alias for a slice of pointers to Mailbox.
	// This should almost always be used instead of []Mailbox.
	MailboxSlice []*Mailbox
	// MailboxHook is the signature for custom Mailbox hook methods
	MailboxHook func(context.Context, boil.ContextExecutor, *Mailbox) error

	mailboxQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mailboxType                 = reflect.TypeOf(&Mailbox{})
	mailboxMapping              = queries.MakeStructMapping(mailboxType)
	mailboxPrimaryKeyMapping, _ = queries.BindMapping(mailboxType, mailboxMapping, mailboxPrimaryKeyColumns)
	mailboxInsertCacheMut       sync.RWMutex
	mailboxInsertCache          = make(map[string]insertCache)
	mailboxUpdateCacheMut       sync.RWMutex
	mailboxUpdateCache          = make(map[string]updateCache)
	mailboxUpsertCacheMut       sync.RWMutex
	mailboxUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mailboxAfterSelectMu sync.Mutex
var mailboxAfterSelectHooks []MailboxHook

var mailboxBeforeInsertMu sync.Mutex
var mailboxBeforeInsertHooks []MailboxHook
var mailboxAfterInsertMu sync.Mutex
var mailboxAfterInsertHooks []MailboxHook

var mailboxBeforeUpdateMu sync.Mutex
var mailboxBeforeUpdateHooks []MailboxHook
var mailboxAfterUpdateMu sync.Mutex
var mailboxAfterUpdateHooks []MailboxHook

var mailboxBeforeDeleteMu sync.Mutex
var mailboxBeforeDeleteHooks []MailboxHook
var mailboxAfterDeleteMu sync.Mutex
var mailboxAfterDeleteHooks []MailboxHook

var mailboxBeforeUpsertMu sync.Mutex
var mailboxBeforeUpsertHooks []MailboxHook
var mailboxAfterUpsertMu sync.Mutex
var mailboxAfterUpsertHooks []MailboxHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Mailbox) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailboxAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Mailbox) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailboxBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Mailbox) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailboxAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Mailbox) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailboxBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Mailbox) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailboxAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Mailbox) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailboxBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Mailbox) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailboxAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Mailbox) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailboxBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Mailbox) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailboxAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMailboxHook registers your hook function for all future operations.
func AddMailboxHook(hookPoint boil.HookPoint, mailboxHook MailboxHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mailboxAfterSelectMu.Lock()
		mailboxAfterSelectHooks = append(mailboxAfterSelectHooks, mailboxHook)
		mailboxAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		mailboxBeforeInsertMu.Lock()
		mailboxBeforeInsertHooks = append(mailboxBeforeInsertHooks, mailboxHook)
		mailboxBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		mailboxAfterInsertMu.Lock()
		mailboxAfterInsertHooks = append(mailboxAfterInsertHooks, mailboxHook)
		mailboxAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		mailboxBeforeUpdateMu.Lock()
		mailboxBeforeUpdateHooks = append(mailboxBeforeUpdateHooks, mailboxHook)
		mailboxBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		mailboxAfterUpdateMu.Lock()
		mailboxAfterUpdateHooks = append(mailboxAfterUpdateHooks, mailboxHook)
		mailboxAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		mailboxBeforeDeleteMu.Lock()
		mailboxBeforeDeleteHooks = append(mailboxBeforeDeleteHooks, mailboxHook)
		mailboxBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		mailboxAfterDeleteMu.Lock()
		mailboxAfterDeleteHooks = append(mailboxAfterDeleteHooks, mailboxHook)
		mailboxAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		mailboxBeforeUpsertMu.Lock()
		mailboxBeforeUpsertHooks = append(mailboxBeforeUpsertHooks, mailboxHook)
		mailboxBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		mailboxAfterUpsertMu.Lock()
		mailboxAfterUpsertHooks = append(mailboxAfterUpsertHooks, mailboxHook)
		mailboxAfterUpsertMu.Unlock()
	}
}

// One returns a single mailbox record from the query.
func (q mailboxQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Mailbox, error) {
	o := &Mailbox{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for mailbox")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Mailbox records from the query.
func (q mailboxQuery) All(ctx context.Context, exec boil.ContextExecutor) (MailboxSlice, error) {
	var o []*Mailbox

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Mailbox slice")
	}

	if len(mailboxAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Mailbox records in the query.
func (q mailboxQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count mailbox rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mailboxQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if mailbox exists")
	}

	return count > 0, nil
}

// Domain pointed to by the foreign key.
func (o *Mailbox) Domain(mods ...qm.QueryMod) domainQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.DomainID),
	}

	queryMods = append(queryMods, mods...)

	return Domains(queryMods...)
}

// LoadDomain allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mailboxL) LoadDomain(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMailbox interface{}, mods queries.Applicator) error {
	var slice []*Mailbox
	var object *Mailbox

	if singular {
		var ok bool
		object, ok = maybeMailbox.(*Mailbox)
		if !ok {
			object = new(Mailbox)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMailbox)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMailbox))
			}
		}
	} else {
		s, ok := maybeMailbox.(*[]*Mailbox)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMailbox)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMailbox))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &mailboxR{}
		}
		if !queries.IsNil(object.DomainID) {
			args[object.DomainID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mailboxR{}
			}

			if !queries.IsNil(obj.DomainID) {
				args[obj.DomainID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`domain`),
		qm.WhereIn(`domain.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Domain")
	}

	var resultSlice []*Domain
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Domain")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for domain")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for domain")
	}

	if len(domainAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Domain = foreign
		if foreign.R == nil {
			foreign.R = &domainR{}
		}
		foreign.R.DomainMailboxes = append(foreign.R.DomainMailboxes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DomainID, foreign.ID) {
				local.R.Domain = foreign
				if foreign.R == nil {
					foreign.R = &domainR{}
				}
				foreign.R.DomainMailboxes = append(foreign.R.DomainMailboxes, local)
				break
			}
		}
	}

	return nil
}

// SetDomain of the mailbox to the related item.
// Sets o.R.Domain to related.
// Adds o to related.R.DomainMailboxes.
func (o *Mailbox) SetDomain(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Domain) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `mailbox` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Domain_id"}),
		strmangle.WhereClause("`", "`", 0, mailboxPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DomainID, related.ID)
	if o.R == nil {
		o.R = &mailboxR{
			Domain: related,
		}
	} else {
		o.R.Domain = related
	}

	if related.R == nil {
		related.R = &domainR{
			DomainMailboxes: MailboxSlice{o},
		}
	} else {
		related.R.DomainMailboxes = append(related.R.DomainMailboxes, o)
	}

	return nil
}

// RemoveDomain relationship.
// Sets o.R.Domain to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Mailbox) RemoveDomain(ctx context.Context, exec boil.ContextExecutor, related *Domain) error {
	var err error

	queries.SetScanner(&o.DomainID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("Domain_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Domain = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DomainMailboxes {
		if queries.Equal(o.DomainID, ri.DomainID) {
			continue
		}

		ln := len(related.R.DomainMailboxes)
		if ln > 1 && i < ln-1 {
			related.R.DomainMailboxes[i] = related.R.DomainMailboxes[ln-1]
		}
		related.R.DomainMailboxes = related.R.DomainMailboxes[:ln-1]
		break
	}
	return nil
}

// Mailboxes retrieves all the records using an executor.
func Mailboxes(mods ...qm.QueryMod) mailboxQuery {
	mods = append(mods, qm.From("`mailbox`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`mailbox`.*"})
	}

	return mailboxQuery{q}
}

// FindMailbox retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMailbox(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Mailbox, error) {
	mailboxObj := &Mailbox{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `mailbox` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, mailboxObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from mailbox")
	}

	if err = mailboxObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mailboxObj, err
	}

	return mailboxObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Mailbox) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mailbox provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.Created.IsZero() {
			o.Created = currTime
		}
		if queries.MustTime(o.Modified).IsZero() {
			queries.SetScanner(&o.Modified, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mailboxColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mailboxInsertCacheMut.RLock()
	cache, cached := mailboxInsertCache[key]
	mailboxInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mailboxAllColumns,
			mailboxColumnsWithDefault,
			mailboxColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mailboxType, mailboxMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mailboxType, mailboxMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `mailbox` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `mailbox` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `mailbox` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, mailboxPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into mailbox")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == mailboxMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for mailbox")
	}

CacheNoHooks:
	if !cached {
		mailboxInsertCacheMut.Lock()
		mailboxInsertCache[key] = cache
		mailboxInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Mailbox.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Mailbox) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.Modified, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mailboxUpdateCacheMut.RLock()
	cache, cached := mailboxUpdateCache[key]
	mailboxUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mailboxAllColumns,
			mailboxPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update mailbox, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `mailbox` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, mailboxPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mailboxType, mailboxMapping, append(wl, mailboxPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update mailbox row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for mailbox")
	}

	if !cached {
		mailboxUpdateCacheMut.Lock()
		mailboxUpdateCache[key] = cache
		mailboxUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mailboxQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for mailbox")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for mailbox")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MailboxSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mailboxPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `mailbox` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mailboxPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mailbox slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mailbox")
	}
	return rowsAff, nil
}

var mySQLMailboxUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Mailbox) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mailbox provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.Created.IsZero() {
			o.Created = currTime
		}
		queries.SetScanner(&o.Modified, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mailboxColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMailboxUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mailboxUpsertCacheMut.RLock()
	cache, cached := mailboxUpsertCache[key]
	mailboxUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			mailboxAllColumns,
			mailboxColumnsWithDefault,
			mailboxColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mailboxAllColumns,
			mailboxPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert mailbox, could not build update column list")
		}

		ret := strmangle.SetComplement(mailboxAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`mailbox`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `mailbox` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(mailboxType, mailboxMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mailboxType, mailboxMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for mailbox")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == mailboxMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(mailboxType, mailboxMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for mailbox")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for mailbox")
	}

CacheNoHooks:
	if !cached {
		mailboxUpsertCacheMut.Lock()
		mailboxUpsertCache[key] = cache
		mailboxUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Mailbox record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Mailbox) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Mailbox provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mailboxPrimaryKeyMapping)
	sql := "DELETE FROM `mailbox` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from mailbox")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for mailbox")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mailboxQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mailboxQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mailbox")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mailbox")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MailboxSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mailboxBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mailboxPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `mailbox` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mailboxPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mailbox slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mailbox")
	}

	if len(mailboxAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Mailbox) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMailbox(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MailboxSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MailboxSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mailboxPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `mailbox`.* FROM `mailbox` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mailboxPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MailboxSlice")
	}

	*o = slice

	return nil
}

// MailboxExists checks if the Mailbox row exists.
func MailboxExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `mailbox` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if mailbox exists")
	}

	return exists, nil
}

// Exists checks if the Mailbox row exists.
func (o *Mailbox) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MailboxExists(ctx, exec, o.ID)
}
